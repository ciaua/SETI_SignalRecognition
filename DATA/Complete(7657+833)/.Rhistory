message2
message3 = toupper(message2)
message3
ascii <- function(letter) { as.numeric(charToRaw(letter)) }
message4 <- ascii(message3)
message4
#(c) Split	the	numbers	composing m into	smaller	integers.
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
p <- as.bigz(nextprime(40000000000000000))
p
q <- as.bigz(nextprime(46000000000000000))
q
#(e) Call	their	product n.
n <- p * q
#(f) Find	the	totient ϕ(n).
phi <- (p-1) * (q-1)
phi
e <- 28693
gcdex(e, phi)
n
e
encrypted <- powm(message6, e, n)
encrypted
factorize(n)
phi <- (40000000000000063-1)*(46000000000000049-1)
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
d
decrypted <- powm(encrypted, d, n)
decrypted
encrypted
e
phi <- (40000000000000063-1)*(46000000000000049-1)
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
length(decrypted)
decrypted == message6
decryptedcompressed <- paste(decrypted, collapse= "");
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
nmatrix <- as.numeric(apply(dmatrix, 1, paste, collapse = ""))
nmatrix
message <- "Mama always said life was like a box of chocolates You never know what youre gonna get Why should I not work for the NSA That is a tough one but I will take a shot"
message2 <- gsub("[^[:alnum:]]","",message)
message2
message3 = toupper(message2)
message3
ascii <- function(letter) { as.numeric(charToRaw(letter)) }
message4 <- ascii(message3)
message4
#(c) Split	the	numbers	composing m into	smaller	integers.
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
p <- as.bigz(nextprime(40000000000000000))
p
q <- as.bigz(nextprime(46000000000000000))
q
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
nmatrix <- as.numeric(apply(dmatrix, 1, paste, collapse = ""))
nmatrix
dmatrix
nmatrix <- as.numeric(apply(dmatrix, 1, paste, collapse = ""))
nmatrix
message2 <- gsub("[^[:alnum:]]","",message)
message <- "Mama always said life was like a box of chocolates You never know what youre gonna get Why should I not work for the NSA That is a tough one but I will take a shot"
message2 <- gsub("[^[:alnum:]]","",message)
message2
message3 = toupper(message2)
message3
ascii <- function(letter) { as.numeric(charToRaw(letter)) }
message4 <- ascii(message3)
message4
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
p <- as.bigz(nextprime(40000000000000000))
p
q <- as.bigz(nextprime(46000000000000000))
q
n <- p * q
phi <- (p-1) * (q-1)
phi
e <- 28693
gcdex(e, phi)
n
e
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
length(decrypted)
decrypted == message6
decryptedcompressed <- paste(decrypted, collapse= "");
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
dmatrix
nmatrix <- as.numeric(apply(dmatrix, 1, paste, collapse = ""))
nmatrix
decryptedcharacters <- LETTERS[nmatrix - 64]
finaldecryptedcharacters <- paste(decryptedcharacters, collapse= "");
finaldecryptedcharacters
message4
encrypted
message5 = paste(message4, collapse= "");
message5
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
library(R.utils)
library(gmp)
decrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
decrypted
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
decryptedcompressed <- paste(decrypted, collapse = "")
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
dmatrix
library(R.utils)
library(gmp)
decrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
decrypted
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
d <- gcdex(e, phi)[2]
d
gcdex(e, phi)
phi <- as.bigz("(512649735421-1)*(372175231787-1)")
phi
gcdex(e, phi)
phi <- (512649735421-1)*(372175231787-1)
phi
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
gcdex(e, phi)
e <- as.bigz(10007)
e <- as.bigz("10007")
e
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
gcdex(e, phi)
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
decryptedcompressed <- paste(decrypted, collapse = "")
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
decryptedcompressed <- paste(decrypted, collapse = "")
decryptedcompressed
l <- length(”4341393391933879347087”)
l <- length("4341393391933879347087”)
l
decrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067”))
decrypted
decrypted
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067”))
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
encypted
encrypted
decrypted
encrypted
encrypted
phi <- (p-1) * (q-1)
phi
e <- 28693
gcdex(e, phi)
#(h) What	is	published	as	the	public	key?
n
e
#(i) Encode	the	message m. The	result	is	called c for	coded	message.
encrypted <- powm(message6, e, n)
encrypted
#(j) Pretend	that	you	only	know	the	public	parts	of	the	key (n, e). Try	to	decrypt c.
factorize(n)
encrypted
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
encrypted
encrypted
encrypted
e <- as.bigz("10007")
e
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
gcdex(e, phi)
d <- gcdex(e, phi)[2]
d
encrypted
e <- as.bigz("10007")
e
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
gcdex(e, phi)
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
decryptedcompressed <- paste(decrypted, collapse = "")
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
dmatrix
decrypted <- powm(encrypted, d, n)
decrypted
decryptedcompressed <- paste(decrypted, collapse = "")
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
dmatrix
decrypted <- powm(encrypted, d, n)
decrypted
message <- "Mama always said life was like a box of chocolates You never know what youre gonna get Why should I not work for the NSA That is a tough one but I will take a shot"
#(b) Leave	out	the	non-alphabetic	characters	and	encode	it	into	numbers	using	ASCII or	another	numeric
#code	that	you	must	explain. Show	the	numeric	encoding	(and	padding). Call	this m for	message.
message2 <- gsub("[^[:alnum:]]","",message)
message2
message3 = toupper(message2)
message3
ascii <- function(letter) { as.numeric(charToRaw(letter)) }
message4 <- ascii(message3)
message4
#(c) Split	the	numbers	composing m into	smaller	integers.
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
p <- as.bigz(nextprime(40000000000000000))
p
q <- as.bigz(nextprime(46000000000000000))
q
#(e) Call	their	product n.
n <- p * q
#(f) Find	the	totient ϕ(n).
phi <- (p-1) * (q-1)
phi
e <- 28693
gcdex(e, phi)
#(h) What	is	published	as	the	public	key?
n
e
#(i) Encode	the	message m. The	result	is	called c for	coded	message.
encrypted <- powm(message6, e, n)
encrypted
#(j) Pretend	that	you	only	know	the	public	parts	of	the	key (n, e). Try	to	decrypt c.
factorize(n)
phi <- (40000000000000063-1)*(46000000000000049-1)
d <- gcdex(e, phi)[2]
nmatrix <- as.numeric(apply(dmatrix, 1, paste, collapse = ""))
nmatrix
decryptedcharacters <- LETTERS[nmatrix - 64]
factorize(n)
phi <- (40000000000000063-1)*(46000000000000049-1)
d <- gcdex(e, phi)[2]
d
encrypted <- powm(message6, e, n)
encrypted
decryptedcompressed <- paste(decrypted, collapse= "");
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
dmatrix
nmatrix <- as.numeric(apply(dmatrix, 1, paste, collapse = ""))
nmatrix
decryptedcharacters <- LETTERS[nmatrix - 64]
finaldecryptedcharacters <- paste(decryptedcharacters, collapse= "");
finaldecryptedcharacters
factorize(n)
phi <- as.bigz((40000000000000063-1)*(46000000000000049-1))
d <- gcdex(e, phi)[2]
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
gcdex(e, phi)
library(R.utils)
library(gmp)
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
encrypted
e <- as.bigz("10007")
e
n <- as.bigz("190795534105854899027327")
factorize(n)
phi <- as.bigz((512649735421-1)*(372175231787-1))
phi
gcdex(e, phi)
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
decryptedcompressed <- paste(decrypted, collapse = "")
decryptedcompressed
dmatrix <- matrix(as.numeric(strsplit(decryptedcompressed, split = NULL)[[1]]), ncol = 2, byrow = T)
dmatrix
message <- "Mama always said life was like a box of chocolates You never know what youre gonna get Why should I not work for the NSA That is a tough one but I will take a shot"
#(b) Leave	out	the	non-alphabetic	characters	and	encode	it	into	numbers	using	ASCII or	another	numeric
#code	that	you	must	explain. Show	the	numeric	encoding	(and	padding). Call	this m for	message.
message2 <- gsub("[^[:alnum:]]","",message)
message2
message3 = toupper(message2)
message3
ascii <- function(letter) { as.numeric(charToRaw(letter)) }
message4 <- ascii(message3)
message4
#(c) Split	the	numbers	composing m into	smaller	integers.
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
p <- as.bigz(nextprime(40000000000000000))
p
q <- as.bigz(nextprime(46000000000000000))
q
#(e) Call	their	product n.
n <- p * q
#(f) Find	the	totient ϕ(n).
phi <- (p-1) * (q-1)
phi
e <- 28693
gcdex(e, phi)
#(h) What	is	published	as	the	public	key?
n
e
#(i) Encode	the	message m. The	result	is	called c for	coded	message.
encrypted <- powm(message6, e, n)
encrypted
#(j) Pretend	that	you	only	know	the	public	parts	of	the	key (n, e). Try	to	decrypt c.
factorize(n)
phi <- as.bigz((40000000000000063-1)*(46000000000000049-1))
d <- gcdex(e, phi)[2]
d
factorize(n)
phi <- as.bigz((40000000000000063-1)*(46000000000000049-1))
d <- gcdex(e, phi)[2]
message <- "Mama always said life was like a box of chocolates You never know what youre gonna get Why should I not work for the NSA That is a tough one but I will take a shot"
#(b) Leave	out	the	non-alphabetic	characters	and	encode	it	into	numbers	using	ASCII or	another	numeric
#code	that	you	must	explain. Show	the	numeric	encoding	(and	padding). Call	this m for	message.
message2 <- gsub("[^[:alnum:]]","",message)
message2
message3 = toupper(message2)
message3
ascii <- function(letter) { as.numeric(charToRaw(letter)) }
message4 <- ascii(message3)
message4
#(c) Split	the	numbers	composing m into	smaller	integers.
message5 = paste(message4, collapse= "");
message5
message6 = regmatches(message5, gregexpr(".{16}", message5))[[1]]
message6
p <- as.bigz(nextprime(40000000000000000))
p
q <- as.bigz(nextprime(46000000000000000))
q
#(e) Call	their	product n.
n <- p * q
#(f) Find	the	totient ϕ(n).
phi <- (p-1) * (q-1)
phi
e <- 28693
gcdex(e, phi)
#(h) What	is	published	as	the	public	key?
n
e
#(i) Encode	the	message m. The	result	is	called c for	coded	message.
encrypted <- powm(message6, e, n)
encrypted
#(j) Pretend	that	you	only	know	the	public	parts	of	the	key (n, e). Try	to	decrypt c.
factorize(n)
phi <- as.bigz((40000000000000063-1)*(46000000000000049-1))
d <- gcdex(e, phi)[2]
d
decrypted <- powm(encrypted, d, n)
decrypted
length(decrypted)
decrypted == message6
library(gmp)
encrypted <- c(as.bigz("22230397199089062599727"), as.bigz("72677982514633246635774"), as.bigz("154996410734077728596195"), as.bigz("71272391588786701248802"), as.bigz("4341393391933879347087"), as.bigz("55264944459598337985651"), as.bigz("131640130207267395722644"), as.bigz("66452146433592476073000"), as.bigz("159409860104573738769067"))
block2text
block2text("penis")
encrypted <- c("22230397199089062599727", "72677982514633246635774", "154996410734077728596195", "71272391588786701248802", "4341393391933879347087", "55264944459598337985651", "131640130207267395722644", "66452146433592476073000", "159409860104573738769067")
encrypted <- as.bigz(encrypted)
e <- as.bigz("10007")
e <- as.bigz("10007")
e
n <- as.bigz("106979057142239438902601")
factorize(n)
n <- as.bigz("106979057142239438902601")
factorize(n)
phi <- as.bigz((951328829779-1)*(112452239219))
phi
phi <- as.bigz((951328829779-1)*(112452239219-1))
phi
gcdex(e, phi)
gcdex(e, phi)
d <- gcdex(e, phi)[2] + phi
d
raw_X <- read.table("./DATA/official_ts_dataset_dft.csv", header=TRUE, sep=",", row.names="id")
raw_X
setwd('/Users/travischen/Box Sync/Sophomore/spring/cs229/SETI_TimeSeries')
raw_X <- read.table("./DATA/official_ts_dataset_dft.csv", header=TRUE, sep=",", row.names="id")
raw_X
raw_X <- read.table("./DATA/official_ts_dataset_dft.csv", header=TRUE, sep=",", row.names="id")
setwd('/Users/travischen/Box Sync/Sophomore/spring/cs229/SETI_TimeSeries/DATA')
raw_X <- read.table("official_ts_dataset_dft.csv", header=TRUE, sep=",", row.names="id")
setwd('/Users/travischen/Box Sync/Sophomore/spring/cs229/SETI_TimeSeries/DATA/Complete(7657+833)')
raw_X <- read.table("DATA.csv", header=TRUE, sep=",", row.names="id")
raw_X
raw_X[raw_X['0'] == 1]
raw_X[raw_X$0 == 1,]
raw_X[raw_X$0 == 1,]
raw_X <- read.table("DATA.csv", header=TRUE, sep=",", row.names="id")
raw_X[raw_X$0 == 1,]
raw_X <- read.table("DATA.csv", header=TRUE, sep=",", row.names="id")
raw_X[raw_X$Squiggle== '1',]
setwd('/Users/travischen/Box Sync/Sophomore/spring/cs229/SETI_TimeSeries/DATA/Complete(7657+833)')
raw_X <- read.table("Data.csv", header=TRUE, sep=",", row.names="id")
# Separate into unknown and squiggle
unknown <- raw_X[raw_X[,73] == 0,]
squiggle <- raw_X[raw_X[,73] == 1,]
# Normalize each dataset separately; labels no longer relevant
# unknown_label <- unknown[,73]
# squiggle_label <- squiggle[,73]
unknown <- scale(unknown[,1:72])
squiggle <- scale(squiggle[,1:72])
# Replace NA with 0
unknown[is.na(unknown)] = 0
squiggle[is.na(squiggle)] = 0
# Scale up (by factor of sqrt(63)) non-DFT features
unknown[,1:9] <- unknown[,1:9]*sqrt(63)
squiggle[,1:9] <- squiggle[,1:9]*sqrt(63)
attach(rawX)
attach(raw_X)
setwd('/Users/travischen/Box Sync/Sophomore/spring/cs229/SETI_TimeSeries/DATA/Complete(7657+833)')
raw_X <- read.table("Data.csv", header=TRUE, sep=",", row.names="id")
# Separate into unknown and squiggle
unknown <- raw_X[raw_X[,73] == 0,]
squiggle <- raw_X[raw_X[,73] == 1,]
# Normalize each dataset separately; labels no longer relevant
# unknown_label <- unknown[,73]
# squiggle_label <- squiggle[,73]
unknown <- scale(unknown[,1:72])
squiggle <- scale(squiggle[,1:72])
# Replace NA with 0
unknown[is.na(unknown)] = 0
squiggle[is.na(squiggle)] = 0
unknown[,1:9] <- unknown[,1:9]*sqrt(63)
squiggle[,1:9] <- squiggle[,1:9]*sqrt(63)
# Scale up (by factor of sqrt(63)) non-DFT features
unknown[,1:9] <- unknown[,1:9]*sqrt(63)
squiggle[,1:9] <- squiggle[,1:9]*sqrt(63)
###CLUSTERING CODE###
# Determine number of clusters
wss <- (nrow(squiggle)-1)*sum(apply(squiggle,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(squiggle,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
fit <- kmeans(squiggle, 5) # 5 cluster solution
# get cluster means
aggregate(squiggle,by=list(fit$cluster),FUN=mean)
# append cluster assignment
squiggle <- data.frame(squiggle, fit$cluster)
squiggle
# vary parameters for most readable graph
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
library(cluster)
clusplot(squiggle, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(squiggle, fit$cluster)
library(cluster)
clusplot(squiggle, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
library(cluster)
clusplot(squiggle, fit$cluster, color=TRUE, shade=TRUE,
library(cluster)
clusplot(squiggle, fit$cluster, color=TRUE, shade=TRUE,
clusplot(squiggle, fit$cluster, color=TRUE, shade=TRUE,
labels=1, lines=0)
library(cluster)
clusplot(squiggle, fit$cluster, color=TRUE, shade=TRUE,
labels=1, lines=0, main='kmeans PCA results')
